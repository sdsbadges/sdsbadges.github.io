{"version":3,"sources":["assets/logo.svg","screens/Home/Home.tsx","stores/UserStore.tsx","screens/Login/Login.tsx","screens/Header/Header.tsx","components/Routes/UnauthenticatedRoute.tsx","components/Routes/AuthenticatedRoute.tsx","components/UI/NotFound.tsx","screens/Root.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","ScreensHome","className","React","UserActions","Reflux","createActions","UserLogin","children","Logout","UserStore","token","sessionStorage","getItem","state","isAuthenticated","errorMessage","loading","AuthServerURL","listenables","loadSettings","username","password","this","setState","setTimeout","completed","access_token","json","setItem","failed","error","console","log","message","stack","error_description","clear","request","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","jsonData","JSON","parse","response","setInterval","statusText","send","Store","initStore","ScreensLogin","props","validateForm","length","handleUsernameChange","event","target","value","handlePasswordChange","handleSubmit","preventDefault","stores","storeKeys","Form","onSubmit","FormGroup","Label","for","Input","id","type","onChange","Button","disabled","Spinner","color","Alert","Component","ScreensHeader","handleLogout","documentClickHandler","e","onDocumentClick","dropDown","button","document","addEventListener","removeEventListener","errorInfo","navMenu","navMenuButton","userInfo","ref","r","data-toggle","onClick","isOpen","href","src","Logo","alt","contains","C","component","cProps","rest","redirect","name","url","window","location","replace","results","RegExp","exec","decodeURIComponent","querystring","render","to","pathname","search","UINotFound","Routes","childProps","AuthenticatedRoute","path","exact","UnauthenticatedRoute","ScreensRoot","App","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1563dc7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react';\r\nimport './Home.scss';\r\n\r\n/**\r\n * Currently, just holds a template for the home page.\r\n */\r\nexport default class ScreensHome extends React.Component {\r\n    public render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className=\"lander\">\r\n                    <h1>Home Page</h1>\r\n                    <p>Eventually will hold all of the sub applications</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import Reflux from 'reflux';\n\n/**\n * Custom Error Type\n */\ninterface IError {\n    error: string;\n    error_description: string;\n}\n\n/**\n * Reflux User Actions\n */\nexport const UserActions = Reflux.createActions({\n    UserLogin: { children: ['completed', 'catchException', 'failed'] },\n    Logout: {},\n});\n\n/**\n * Reflux User Store, should eventually be converted to TypeScript.\n */\nexport class UserStore extends Reflux.Store {\n    /**\n     * Constructor for the UserStore class. Initializes the state and connects the listenable actions.\n     */\n    constructor() {\n        super();\n\n        const token = sessionStorage.getItem('token');\n\n        // Set the stores default state\n        this.state = {\n            isAuthenticated: (token != null),\n            errorMessage: null,\n            loading: false,\n            AuthServerURL: \"\"\n        };\n        this.listenables = [UserActions];\n\n        this.loadSettings();\n    }\n\n    /**\n     * Login with Username + Pass combination.\n     * @param username contains username\n     * @param password contains password\n     */\n    onUserLogin(username: string, password: string) {\n        // const url = `${this.state.AuthServerURL}/token`;\n        // const body = `grant_type=password&username=${username}&password=${password}`;\n        this.setState({ loading: true, errorMessage: null });\n\n        setTimeout(function() {\n            UserActions.UserLogin.completed({\n                access_token: \"FAKE_TOKE\",\n            })\n        }, 2000);\n\n        // fetch(url, {\n        //     method: 'POST', // or 'PUT'\n        //     body, // data can be `string` or {object}!\n        //     headers: {\n        //         'Content-Type': 'application/x-www-form-urlencoded',\n        //     },\n        // }).then((res) => res.json())\n        //     .then((response) => UserActions.UserLogin.completed(response))\n        //     .catch((error) => UserActions.UserLogin.catchException(error));\n    }\n\n    /**\n     * If the token is available, set the login information, otherwise call UserAction > Failed\n     * @param json Contains access_token after a successful login\n     */\n    onUserLoginCompleted(json: { access_token: string; token_type: string; expires_in: number }) {\n        if (json.access_token) {\n            sessionStorage.setItem('token', json.access_token);\n            this.setState({\n                isAuthenticated: (json.access_token !== null),\n                loading: false,\n            });\n        } else {\n            UserActions.UserLogin.failed(json);\n        }\n    }\n\n    /**\n     * Catch any exception / timeout\n     * @param error Contains error message and stack\n     */\n    onUserLoginCatchException(error: TypeError) {\n        console.log(`POST - UserStore/UserLogin threw exception: ${error.message}, stack: ${error.stack}`);\n        this.setState({ errorMessage: error.message, loading: false });\n    }\n\n    /**\n     * User Login failed, set the description message for the user and log the error.\n     * @param error Custom error contains description and message\n     */\n    onUserLoginFailed(error: IError) {\n        console.log(`POST - UserStore/UserLogin failed with error:${error.error}`);\n        this.setState({ errorMessage: error.error_description, loading: false });\n    }\n\n    /**\n     * User Logout, remove session information.\n     */\n    onLogout() {\n        sessionStorage.clear();\n        this.setState({\n            isAuthenticated: false,\n        });\n    }\n\n    private loadSettings() {\n        var url = \"settings.json\";\n        var request = new XMLHttpRequest();\n\n        request.open(\"GET\", url, true);\n        request.setRequestHeader(\"Content-Type\", \"application/json\");\n        request.onreadystatechange = (): void => {\n            if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n            }\n\n            if (request.status === 200) {\n                var jsonData = JSON.parse(request.response);\n                this.setState(jsonData);\n                console.log(`[UserStore] settings.`);\n            } else {\n                setInterval(() => { this.loadSettings() }, 5000) ;\n                console.error(`[UserStore] Error during request: status = ${request.status} ${request.statusText}`);\n            }\n        };\n\n        request.send();\n    }\n}\nReflux.initStore(UserStore);\n","import React from 'react';\nimport Reflux, { Store } from 'reflux';\nimport { Form, FormGroup, Label, Input, Button, Alert, Spinner } from 'reactstrap';\nimport { History } from 'history';\nimport { UserActions, UserStore } from 'stores/UserStore';\nimport './Login.scss';\n\ninterface IProps {\n    history: History;\n}\n\ninterface IState {\n    username: string;\n    password: string;\n    errorMessage: string | null;\n    loading: boolean;\n}\n\n/**\n * Login Screen connects to the UserStore and handles user login behavior.\n */\nclass ScreensLogin extends Reflux.Component<typeof Store, IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.stores = [UserStore];\n        this.storeKeys = ['errorMessage', 'loading'];\n\n        this.state = {\n            username: '',\n            password: '',\n            errorMessage: null,\n            loading: false,\n        };\n    }\n\n    public validateForm = () => {\n        return this.state.username.length > 0 && this.state.password.length > 0;\n    }\n\n    public handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ username: event.target.value });\n    }\n\n    public handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ password: event.target.value });\n    }\n\n    public handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        UserActions.UserLogin(this.state.username, this.state.password);\n    }\n\n    public render() {\n        return (\n            <div className=\"Login\">\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"username\">Username:</Label>\n                        <Input id=\"username\" type=\"text\" value={this.state.username} onChange={this.handleUsernameChange} />\n                    </FormGroup>\n                    <FormGroup >\n                        <Label for=\"password\">Password:</Label>\n                        <Input id=\"password\" type=\"password\" value={this.state.password} onChange={this.handlePasswordChange} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button disabled={!this.validateForm()} type=\"submit\">\n                            Login\n                        </Button>\n                    </FormGroup>\n                    <div>\n                        {this.state.loading && <Spinner color=\"primary\" />}\n                        {this.state.errorMessage != null && <Alert color=\"danger\">{this.state.errorMessage}</Alert>}\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default ScreensLogin;\n","import React from \"react\";\nimport Reflux from \"reflux\";\nimport { Button } from 'reactstrap';\nimport { UserStore, UserActions } from \"stores/UserStore\";\nimport \"./Header.scss\";\nimport Logo from \"assets/logo.svg\";\n\n/**\n * Contains the header and navigation bar\n */\nexport default class ScreensHeader extends Reflux.Component {\n    /**\n     * Constructor for reflux component\n     * @param props any type for now\n     */\n    constructor(props: any) {\n        super(props);\n        this.stores = [UserStore];\n        document.addEventListener(\"click\", this.documentClickHandler);\n    }\n\n    public componentWillUnmount(): void {\n        document.removeEventListener(\"click\", this.documentClickHandler);\n    }\n\n    /**\n     * Catches and logs errors in descendant components\n     */\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n        console.log(error.message);\n    }\n\n    /**\n     * Logout button was clicked\n     */\n    public handleLogout = (event: any) => {\n        UserActions.Logout();\n    };\n\n    public render() {\n        let navMenuButton = <div className=\"col\"></div>, navMenu, userInfo = <div className=\"col mr-0\"></div>;\n\n        if (this.state.isAuthenticated) {\n            navMenuButton = (\n                <div className=\"col\">\n                    <button ref={ (r):void => { this.button = r } } className=\"navbar-toggler p-0 border-0 float-left\" type=\"button\" data-toggle=\"offcanvas\" onClick={ ():void => { this.setState({ isOpen: !this.state.isOpen }) } }>\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n\n                    <a className=\"navbar-brand float-left pt-0 d-none d-sm-block\" href=\"/\">{/* Product name goes here... */}</a>\n                </div>\n            );\n\n            navMenu = (\n                <div ref={(r): void => { this.dropDown = r; }} className={`navbar-collapse offcanvas-collapse${this.state.isOpen ? \" open\": \"\"}`}>\n                    <button className=\"navbar-toggler p-0 border-0 float-right\" type=\"button\" data-toggle=\"offcanvas\" onClick={ ():void => { this.setState({ isOpen: !this.state.isOpen }) } }>\n                        <i className=\"mdi mdi-close\" />\n                    </button>\n\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/link1\">\n                                <i className=\"mdi mdi-timetable\" />\n                                <span>Link 1</span>\n                            </a>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"/link2\">\n                                <i className=\"mdi mdi-message-text\" />\n                                <span>Link 2</span>\n                            </a>\n                        </li>\n\n                        <li className=\"nav-item\">\n                            <Button onClick={this.handleLogout}>Logout</Button>\n                        </li>\n\n                    </ul>\n                </div>\n            );\n\n            userInfo = (\n                <div className=\"col mr-0\">\n                    {/* User info/menu goes here... */}\n                </div>\n            );\n        }\n\n        return (\n            <nav className=\"navbar fixed-top row\">\n                {navMenuButton}\n\n                <div className=\"col\">\n                    <a className=\"navbar-brand-img\" href=\"/\">\n                        <img src={Logo} alt=\"Temp Logo\" />\n                    </a>\n                </div>\n\n                {userInfo}\n\n                {navMenu}\n            </nav>\n        );\n    }\n\n    private onDocumentClick(e: Event) {\n        // Close the menu if the user clicks anywhere outside the menu or menu button.\n        if (this.button && (this.button === e.target || this.button.contains(e.target as HTMLElement))) {\n            return;\n        }\n\n        if (this.dropDown && !this.dropDown.contains(e.target as HTMLElement)) {\n            this.setState({ isOpen: false});\n        }\n    }\n\n    private documentClickHandler = (e: any) => this.onDocumentClick(e);\n    private dropDown: HTMLDivElement | null = null;\n    private button: HTMLElement | null = null;\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nfunction querystring(name: any, url = window.location.href) {\n    name = name.replace(/[[]]/g, '\\\\$&');\n\n    const regex = new RegExp(\"[?&]\" + name + '(=([^&#]*)|&|#|$)', 'i');\n    const results = regex.exec(url);\n\n    if (!results) {\n        return null;\n    }\n    if (!results[2]) {\n        return '';\n    }\n\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * If the user is not authenticated, then we simply render the passed in component. If the user is authenticated,\n * then we use the Redirect React Router v4 component to redirect the user to the home page. If you navigate to a\n * specific page first then you will be redirected to this exact page after the successful login.\n */\nexport default ({ component: C, props: cProps, ...rest }: any) => {\n    const redirect = querystring('redirect');\n    return (\n        <Route\n            {...rest}\n            render={(props) =>\n                !cProps.isAuthenticated\n                    ? <C {...props} {...cProps} />\n                    : <Redirect\n                        to={redirect === '' || redirect === null ? '/' : redirect}\n                    />}\n        />\n    );\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\n/**\n * If the user is authenticated, then we simply render the passed in component. If the user is not authenticated,\n * then we use the Redirect React Router v4 component to redirect the user to the login page.\n */\nexport default ({ component: C, props: cProps, ...rest }: any) =>\n    <Route\n        {...rest}\n        render={(props) =>\n            cProps.isAuthenticated\n                ? <C {...props} {...cProps} />\n                : <Redirect\n                    to={`/login?redirect=${props.location.pathname}${props.location.search}`}\n                />}\n    />;\n","import * as React from 'react';\r\nimport './NotFound.scss';\r\n\r\n/**\r\n * Catch all for routes that aren't recognized.\r\n */\r\nconst UINotFound = () => (\r\n    <div className=\"NotFound sub-app\">\r\n        <h3>Sorry, page not found!</h3>\r\n    </div>\r\n);\r\n\r\nexport default UINotFound;\r\n","import * as React from 'react';\nimport * as Reflux from 'reflux';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport ScreensHome from 'screens/Home/Home';\nimport ScreensLogin from 'screens/Login/Login';\nimport ScreensHeader from 'screens/Header/Header';\nimport UnauthenticatedRoute from 'components/Routes/UnauthenticatedRoute';\nimport AuthenticatedRoute from 'components/Routes/AuthenticatedRoute';\nimport UINotFound from 'components/UI/NotFound';\nimport { UserStore } from 'stores/UserStore';\n\n/**\n * Contains all routes in the current system. This is setup to authenticate pages.\n * @param childProps Custom object currently only containing whether the user is authenticated or not.\n */\nconst Routes = ({ childProps } : any) => (\n    <Switch>\n        <AuthenticatedRoute path=\"/\" exact component={ScreensHome} props={childProps} />\n        <AuthenticatedRoute path=\"/home\" exact component={ScreensHome} props={childProps} />\n        <UnauthenticatedRoute path=\"/login\" exact component={ScreensLogin} props={childProps} />\n        { /* Finally, catch all unmatched routes */ }\n        <Route component={UINotFound} />\n    </Switch>\n);\n\n/**\n * Contains the home page. Entrypoint for the portal application.\n */\nexport default class ScreensRoot extends Reflux.Component {\n    constructor(props: any) {\n        super(props);\n\n        this.stores = [UserStore];\n    }\n    render() {\n        const childProps = { isAuthenticated: this.state.isAuthenticated };\n        return <BrowserRouter>\n            <ScreensHeader />\n            <Routes childProps={childProps} />\n        </BrowserRouter>;\n    }\n}\n","import * as React from 'react';\nimport ScreensRoot from 'screens/Root';\n\nclass App extends React.Component {\n    render() {\n        return <ScreensRoot />;\n    }\n\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n        console.log(error.message);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}